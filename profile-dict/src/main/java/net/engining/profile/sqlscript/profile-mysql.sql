SET SESSION FOREIGN_KEY_CHECKS=0;

/* Drop Tables */

DROP TABLE IF EXISTS PROFILE_BRANCH;
DROP TABLE IF EXISTS PROFILE_MENU;
DROP TABLE IF EXISTS PROFILE_PWD_HIST;
DROP TABLE IF EXISTS PROFILE_ROLE_AUTH;
DROP TABLE IF EXISTS PROFILE_USER_ROLE;
DROP TABLE IF EXISTS PROFILE_ROLE;
DROP TABLE IF EXISTS PROFILE_SECOPER_LOG;
DROP TABLE IF EXISTS PROFILE_USER;




/* Create Tables */

-- PROFILE_BRANCH
CREATE TABLE PROFILE_BRANCH
(
	ORG_ID VARCHAR(12) NOT NULL COMMENT '机构号',
	BRANCH_ID VARCHAR(9) NOT NULL COMMENT '分支编码',
	SUPERIOR_ID VARCHAR(9) COMMENT '上级分支',
	BRANCH_NAME VARCHAR(100) NOT NULL COMMENT '分支名',
	ADDR_CODE VARCHAR(100) COMMENT '所属地区码',
	ADDRESS VARCHAR(120) COMMENT '地址',
	DISTRICT VARCHAR(60) COMMENT '区',
	CITY VARCHAR(60) COMMENT '城市',
	TELEPHONE1 VARCHAR(40) COMMENT '联系电话1',
	TELEPHONE2 VARCHAR(40) COMMENT '联系电话2',
	JPA_VERSION INT NOT NULL COMMENT '乐观锁版本号',
	PRIMARY KEY (ORG_ID, BRANCH_ID)
) COMMENT = 'PROFILE_BRANCH';


-- 菜单表
CREATE TABLE PROFILE_MENU
(
	ID INT NOT NULL AUTO_INCREMENT COMMENT 'ID',
	ORG_ID VARCHAR(12) COMMENT '机构号',
	MNAME VARCHAR(20) NOT NULL COMMENT '菜单名称',
	PATH_URL VARCHAR(500) NOT NULL COMMENT '菜单路径',
	-- 0表示顶级菜单
	PARENT_ID INT DEFAULT 0 NOT NULL COMMENT '上级菜单ID : 0表示顶级菜单',
	SORTN INT NOT NULL COMMENT '序号',
	ICON VARCHAR(255) COMMENT '图标路径',
	MTN_TIMESTAMP TIMESTAMP COMMENT '修改时间',
	MTN_USER VARCHAR(40) COMMENT '修改用户',
	JPA_VERSION INT NOT NULL COMMENT '乐观锁版本号',
	PRIMARY KEY (ID)
) COMMENT = '菜单表';


-- 密码维护历史表 : 记录每个用户的密码历史，以便判断密码重复。
CREATE TABLE PROFILE_PWD_HIST
(
	ID INT NOT NULL AUTO_INCREMENT COMMENT 'ID',
	-- ###uuid2###
	PU_ID VARCHAR(64) NOT NULL COMMENT 'PU_ID : ###uuid2###',
	-- 密码，存放256位SHA1值，并且带用户名salt，按org.springframework.security.authentication.encoding.ShaPasswordEncoder(256)的算法，salt后的密码为password{username}
	PASSWORD VARCHAR(300) NOT NULL COMMENT '密码 : 密码，存放256位SHA1值，并且带用户名salt，按org.springframework.security.authentication.encoding.ShaPasswordEncoder(256)的算法，salt后的密码为password{username}',
	PWD_CRE_TIME TIMESTAMP DEFAULT NOW() NOT NULL COMMENT '密码建立时间',
	JPA_VERSION INT NOT NULL COMMENT '乐观锁版本号',
	PRIMARY KEY (ID)
) COMMENT = '密码维护历史表 : 记录每个用户的密码历史，以便判断密码重复。';


-- 角色定义表
CREATE TABLE PROFILE_ROLE
(
	ROLE_ID VARCHAR(20) NOT NULL COMMENT '角色ID',
	ORG_ID VARCHAR(12) NOT NULL COMMENT '机构号',
	BRANCH_ID VARCHAR(9) NOT NULL COMMENT '分支编码',
	ROLE_NAME VARCHAR(200) NOT NULL COMMENT '角色名',
	JPA_VERSION INT NOT NULL COMMENT '乐观锁版本号',
	PRIMARY KEY (ROLE_ID)
) COMMENT = '角色定义表';


-- 权限表
CREATE TABLE PROFILE_ROLE_AUTH
(
	ROLE_ID VARCHAR(20) NOT NULL COMMENT '角色ID',
	AUTHORITY VARCHAR(100) NOT NULL COMMENT '权限标识',
	AUTU_URI VARCHAR(500) NOT NULL COMMENT '权限URI',
	PRIMARY KEY (ROLE_ID, AUTHORITY)
) COMMENT = '权限表';


-- 用户安全操作日志
CREATE TABLE PROFILE_SECOPER_LOG
(
	LOG_ID INT NOT NULL AUTO_INCREMENT COMMENT '日志序号',
	-- ###uuid2###
	PU_ID VARCHAR(64) NOT NULL COMMENT 'PU_ID : ###uuid2###',
	BEOPERATED_ID VARCHAR(64) COMMENT '被操作用户ID',
	-- ///
	-- @net.engining.profile.enums.OperationType
	OPER_TYPE VARCHAR(2) NOT NULL COMMENT '操作业务类型 : ///
@net.engining.profile.enums.OperationType',
	OPER_IP VARCHAR(30) NOT NULL COMMENT 'IP地址',
	OPER_TIME TIMESTAMP DEFAULT NOW() NOT NULL COMMENT '操作时间',
	JPA_VERSION INT NOT NULL COMMENT '乐观锁版本号',
	PRIMARY KEY (LOG_ID)
) COMMENT = '用户安全操作日志';


-- 用户信息表
CREATE TABLE PROFILE_USER
(
	-- ###uuid2###
	PU_ID VARCHAR(64) NOT NULL COMMENT 'PU_ID : ###uuid2###',
	ORG_ID VARCHAR(12) NOT NULL COMMENT '机构号',
	BRANCH_ID VARCHAR(9) COMMENT '分支编码',
	USER_ID VARCHAR(40) NOT NULL COMMENT '登陆ID',
	NAME VARCHAR(40) NOT NULL COMMENT '姓名',
	-- 密码，存放256位SHA1值，并且带用户名salt，按org.springframework.security.authentication.encoding.ShaPasswordEncoder(256)的算法，salt后的密码为password{username}
	PASSWORD VARCHAR(300) NOT NULL COMMENT '密码 : 密码，存放256位SHA1值，并且带用户名salt，按org.springframework.security.authentication.encoding.ShaPasswordEncoder(256)的算法，salt后的密码为password{username}',
	-- ///
	-- N|新增
	-- A|活动
	-- L|锁定
	STATUS VARCHAR(1) NOT NULL COMMENT '状态 : ///
N|新增
A|活动
L|锁定',
	EMAIL VARCHAR(128) COMMENT 'EMAIL',
	PWD_EXP_DATE DATE COMMENT '密码过期日期',
	PWD_TRIES INT NOT NULL COMMENT '密码错误次数',
	MTN_TIMESTAMP TIMESTAMP DEFAULT NOW() COMMENT '修改时间',
	MTN_USER VARCHAR(40) COMMENT '修改用户',
	JPA_VERSION INT NOT NULL COMMENT '乐观锁版本号',
	PRIMARY KEY (PU_ID),
	UNIQUE (USER_ID)
) COMMENT = '用户信息表';


-- 用户角色表
CREATE TABLE PROFILE_USER_ROLE
(
	ID INT NOT NULL AUTO_INCREMENT COMMENT 'ID',
	ROLE_ID VARCHAR(20) NOT NULL COMMENT '角色ID',
	-- ###uuid2###
	PU_ID VARCHAR(64) NOT NULL COMMENT 'PU_ID : ###uuid2###',
	PRIMARY KEY (ID)
) COMMENT = '用户角色表';



